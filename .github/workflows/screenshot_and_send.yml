name: Screenshot and Send to WeChat

on:
  schedule:
    - cron: '0 2 * * *' # 每天北京时间10点执行
  workflow_dispatch:
    inputs:
      urls:
        description: '要截图的URL列表（空格分隔）'
        required: false
        default: ''
        type: string
      verbose:
        description: '启用详细日志输出'
        required: false
        default: false
        type: boolean
      update-playwright:
        description: '强制更新Playwright二进制文件'
        required: false
        default: false
        type: boolean

jobs:
  screenshot_and_send:
    runs-on: ubuntu-latest
    continue-on-error: true
    timeout-minutes: 15
    permissions:
      contents: write
    
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN || secrets.PAT }}
          
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'
          cache-dependency-path: 'requirements.txt'
          
      - name: Install dependencies
        run: |
          # 安装依赖包，包含所有依赖关系
          pip install -r requirements.txt --progress-bar off
          
      - name: Check Playwright binary updates
        id: check_updates
        run: |
          echo "🔍 检查Playwright二进制文件更新..."
          
          # 检查是否需要强制更新
          if [ "${{ github.event.inputs.update-playwright }}" = "true" ]; then
            echo "📥 强制更新模式：下载最新Playwright二进制文件"
            echo "UPDATE_NEEDED=true" >> $GITHUB_OUTPUT
          else
            # 使用Python脚本检查二进制文件
            UPDATE_CHECK=$(python check_playwright.py)
            echo "$UPDATE_CHECK"
            echo "$UPDATE_CHECK" >> $GITHUB_OUTPUT
          fi
          
      - name: Download and update Playwright binaries
        if: steps.check_updates.outputs.UPDATE_NEEDED == 'true'
        run: |
          echo "📥 下载最新Playwright二进制文件..."
          
          # 清理旧的二进制文件
          rm -rf playwright-binaries
          mkdir -p playwright-binaries
          
          # 下载Playwright浏览器到临时目录
          PLAYWRIGHT_BROWSERS_PATH=/tmp/playwright-temp playwright install chromium --with-deps
          
          # 复制二进制文件到项目目录（只复制必要的文件）
          cp -r /tmp/playwright-temp/* playwright-binaries/
          
          # 设置执行权限
          find playwright-binaries/ -name "headless_shell" -exec chmod +x {} \;
          find playwright-binaries/ -name "chrome" -exec chmod +x {} \;
          
          # 列出二进制文件内容
          echo "📋 已下载的二进制文件:"
          ls -la playwright-binaries/
          find playwright-binaries/ -type f -name "*.so" -o -name "headless_shell" -o -name "chrome" | head -10
          
          # 清理临时文件
          rm -rf /tmp/playwright-temp
          
      - name: Setup Playwright from local binaries
        run: |
          echo "🎯 从本地二进制文件设置Playwright..."
          
          # 创建系统缓存目录
          mkdir -p ~/.cache/ms-playwright/
          
          # 复制二进制文件到系统目录
          if [ -d "playwright-binaries" ]; then
            cp -r playwright-binaries/* ~/.cache/ms-playwright/
            echo "✅ 二进制文件复制完成"
          else
            echo "❌ 二进制文件目录不存在"
            exit 1
          fi
          
          # 确保执行权限
          find ~/.cache/ms-playwright/ -name "headless_shell" -exec chmod +x {} \;
          find ~/.cache/ms-playwright/ -name "chrome" -exec chmod +x {} \;
          
          # 验证Playwright安装
          echo "🔍 验证Playwright安装..."
          python check_playwright.py verify
          
      - name: Configure Git
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          
      - name: Build command arguments
        id: build_args
        run: |
          ARGS=""
          
          # 处理URL参数
          if [ -n "${{ github.event.inputs.urls }}" ]; then
            ARGS="$ARGS --urls ${{ github.event.inputs.urls }}"
          fi
          
          # 处理详细日志参数
          if [ "${{ github.event.inputs.verbose }}" = "true" ]; then
            ARGS="$ARGS --verbose"
          fi
          
          # 设置CI环境变量
          echo "CI=true" >> $GITHUB_ENV
          echo "DEBUG_LOCAL=false" >> $GITHUB_ENV
          
          echo "args=$ARGS" >> $GITHUB_OUTPUT
          
      - name: Run screenshot and send script
        id: screenshot_script
        env:
          WEBHOOK_KEY: ${{ secrets.WEBHOOK_KEY }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_REF_NAME: ${{ github.ref_name }}
          CI: true
          DEBUG_LOCAL: false
        run: |
          python screenshot_and_send.py ${{ steps.build_args.outputs.args }} --width 1920 --height 1080
        continue-on-error: true
        
      - name: Check script execution result
        if: steps.screenshot_script.outcome == 'failure'
        run: |
          echo "❌ 脚本执行失败"
          echo "检查日志以获取详细信息"
          exit 1
          
      - name: Commit and push Playwright binaries (with retry)
        if: steps.check_updates.outputs.UPDATE_NEEDED == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ -d "playwright-binaries" ]; then
            git add -A playwright-binaries/
            if git diff --staged --quiet; then
              echo "🎯 Playwright二进制文件无变化"
            else
              echo "📤 尝试提交Playwright二进制文件..."
              git commit -m "chore: update playwright binaries $(date '+%Y-%m-%d %H:%M:%S')"
              
              # 计算文件大小
              TOTAL_SIZE=$(du -sk playwright-binaries/ | cut -f1)
              echo "📊 二进制文件总大小: ${TOTAL_SIZE}KB"
              
              # 尝试推送，设置更长的超时时间
              echo "📤 尝试推送二进制文件（第一次尝试）..."
              if git push https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}.git main --timeout=600; then
                echo "✅ Playwright二进制文件已成功推送到仓库"
              else
                echo "⚠️ 第一次推送失败，尝试清理不必要的文件..."
                
                # 清理一些不必要的文件以减少大小
                find playwright-binaries/ -name "*.pdb" -delete
                find playwright-binaries/ -name "*.debug" -delete
                find playwright-binaries/ -name "*.map" -delete
                
                # 重新提交
                git add -A playwright-binaries/
                git commit -m "chore: update playwright binaries (optimized) $(date '+%Y-%m-%d %H:%M:%S')"
                
                echo "📤 尝试推送优化后的二进制文件（第二次尝试）..."
                if git push https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}.git main --timeout=600; then
                  echo "✅ Playwright二进制文件（优化版）已成功推送到仓库"
                else
                  echo "❌ 推送失败，但CI任务继续执行"
                  echo "💡 建议：手动清理仓库中的大文件或使用Git LFS"
                fi
              fi
            fi
          fi
          
      - name: Commit and push changes (cleanup)
        if: success()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git add -A screenshots/
          if git diff --staged --quiet; then
            echo "📁 没有需要提交的截图文件"
          else
            git commit -m "chore: cleanup screenshots after sending $(date '+%Y-%m-%d %H:%M:%S')"
            git push https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}.git main
            echo "📁 已清理截图文件"
          fi
          
      - name: Summary
        if: always()
        run: |
          echo "## 📋 任务执行总结" >> $GITHUB_STEP_SUMMARY
          echo "- **执行时间**: $(date '+%Y-%m-%d %H:%M:%S')" >> $GITHUB_STEP_SUMMARY
          echo "- **触发方式**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **执行状态**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "- **仓库**: ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
          echo "- **分支**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Playwright二进制更新**: ${{ steps.check_updates.outputs.UPDATE_NEEDED }}" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.screenshot_script.outcome }}" = "success" ]; then
            echo "- ✅ **截图任务**: 成功完成" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ❌ **截图任务**: 执行失败" >> $GITHUB_STEP_SUMMARY
          fi
