name: Screenshot and Send to WeChat

on:
  schedule:
    - cron: '0 2 * * *' # 每天北京时间10点执行
  workflow_dispatch:
    inputs:
      urls:
        description: '要截图的URL列表（空格分隔）'
        required: false
        default: ''
        type: string
      verbose:
        description: '启用详细日志输出'
        required: false
        default: false
        type: boolean

jobs:
  screenshot_and_send:
    runs-on: ubuntu-latest
    continue-on-error: true
    timeout-minutes: 10
    permissions:
      contents: write
    
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN || secrets.PAT }}
          
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'
          cache-dependency-path: 'requirements.txt'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          playwright install chromium --with-deps
          
      - name: Configure Git
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          
      - name: Build command arguments
        id: build_args
        run: |
          ARGS=""
          
          # 处理URL参数
          if [ -n "${{ github.event.inputs.urls }}" ]; then
            ARGS="$ARGS --urls ${{ github.event.inputs.urls }}"
          fi
          
          # 处理详细日志参数
          if [ "${{ github.event.inputs.verbose }}" = "true" ]; then
            ARGS="$ARGS --verbose"
          fi
          
          # 设置CI环境变量
          echo "CI=true" >> $GITHUB_ENV
          echo "DEBUG_LOCAL=false" >> $GITHUB_ENV
          
          echo "args=$ARGS" >> $GITHUB_OUTPUT
          
      - name: Run screenshot and send script
        id: screenshot_script
        env:
          WEBHOOK_KEY: ${{ secrets.WEBHOOK_KEY }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_REF_NAME: ${{ github.ref_name }}
          CI: true
          DEBUG_LOCAL: false
        run: |
          python screenshot_and_send.py ${{ steps.build_args.outputs.args }}
        continue-on-error: true
        
      - name: Check script execution result
        if: steps.screenshot_script.outcome == 'failure'
        run: |
          echo "❌ 脚本执行失败"
          echo "检查日志以获取详细信息"
          exit 1
          
      - name: Commit and push changes (cleanup)
        if: success()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git add -A screenshots/
          if git diff --staged --quiet; then
            echo "📁 没有需要提交的截图文件"
          else
            git commit -m "chore: cleanup screenshots after sending $(date '+%Y-%m-%d %H:%M:%S')"
            git push https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}.git main
            echo "📁 已清理截图文件"
          fi
          
      - name: Summary
        if: always()
        run: |
          echo "## 📋 任务执行总结" >> $GITHUB_STEP_SUMMARY
          echo "- **执行时间**: $(date '+%Y-%m-%d %H:%M:%S')" >> $GITHUB_STEP_SUMMARY
          echo "- **触发方式**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **执行状态**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "- **仓库**: ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
          echo "- **分支**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.screenshot_script.outcome }}" = "success" ]; then
            echo "- ✅ **截图任务**: 成功完成" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ❌ **截图任务**: 执行失败" >> $GITHUB_STEP_SUMMARY
          fi
